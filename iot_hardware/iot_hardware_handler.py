"""
    Copyright 2021 Walter Pachlinger (walter.pachlinger@gmail.com)

    Licensed under the EUPL, Version 1.2 or - as soon they will be approved by the European
    Commission - subsequent versions of the EUPL (the LICENSE). You may not use this work except
    in compliance with the LICENSE. You may obtain a copy of the LICENSE at:

        https://joinup.ec.europa.eu/software/page/eupl

    Unless required by applicable law or agreed to in writing, software distributed under the
    LICENSE is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    either express or implied. See the LICENSE for the specific language governing permissions
    and limitations under the LICENSE.
"""
import inspect
import logging
import json
import wp_queueing
import iot_base
from iot_message import InputProbe
from iot_hardware_input import DigitalInputADS1115


class IotInputDeviceHandler(iot_base.IotHandlerBase):
    """ Handler for an input hardware device (ADS1115).

    Attributes:
        logger : logging.Logger
            Logger to be used.
        device_type : str
            Type of the digital input device. Currently allowed values:
                "ADS1115"
        mqtt_pub_data : wp_queueing.MQTTProducer
            Session to a MQTT broker for publishing the polled input values.
        mqtt_pub_health: wp_queueing.MQTTProducer
            Session to a MQTT broker for publishing the polled health check results.
        device : InputDevice
            Input device driver that handles the connected hardware component.

    Methods:
        InputDeviceHandler
            Constructor.
    """
    # pylint: disable=too-many-instance-attributes
    def __init__(self, device_config: dict, logger: logging.Logger):
        """ Constructor.

        Parameters:
            config_dict: dict
                Dictionary containing the configuration settings for the hardware device.
            logger : logging.Logger
                Logger to be used by the object.
            mqtt_publish : wp_queueing.MQTTProducer
                Producer to be used to publish the polled values.
        """
        mth_name = "{}.{}()".format(self.__class__.__name__, inspect.currentframe().f_code.co_name)
        self.device_id = device_config['device_id']
        self.device_type = device_config['device_type']
        self.device_model = device_config['model']
        self.logger = logger

        self.logger.debug('{}: device_id={}, device_type={}, model={}'.format(
            mth_name, self.device_id, self.device_type, self.device_model))

        data_topic = None
        input_topic = None
        health_topic = None
        if 'data_topic' in device_config:
            data_topic = device_config['data_topic']
        if 'input_topic' in device_config:
            input_topic = device_config['input_topic']
        if 'health_topic' in device_config:
            health_topic = device_config['health_topic']
        super().__init__(device_config['polling_interval'],
                         data_topic = data_topic, input_topic = input_topic, health_topic = health_topic)
        if self.device_model == 'ADS1115':
            self._device = DigitalInputADS1115(
                self.device_id,
                device_config['i2c']['bus_id'], device_config['i2c']['bus_address'],
                device_config['active_ports'], logger)
        else:
            self._device = None

    def _data_topic(self, probe: InputProbe) -> str:
        """ Constructs the MTTQ message topic for a MQTT message to be published to the broker.

        Parameters:
            probe : probe result generated by the underlying hardware device.

        Returns:
            str : MQTT topic.
        """
        return "{}/{}/{}".format(self.data_topic[1], probe.device_id, probe.channel_no)

    def _health_topic(self) -> str:
        return "{}/{}".format(self.health_topic[1], self._device.device_id)

    def polling_timer_event(self) -> None:
        """ Indicates that the polling timer has expired and the underlying device must be probed.
        """
        super().polling_timer_event()
        mth_name = "{}.{}()".format(self.__class__.__name__, inspect.currentframe().f_code.co_name)
        self.logger.debug(mth_name)
        if self._device is None or self.data_topic is None:
            return
        poll_result = self._device.probe()
        for probe in poll_result:
            msg = wp_queueing.QueueMessage(self._data_topic(probe))
            msg.msg_payload = probe.to_dict()
            self.data_topic[0].publish_single(msg)

    def health_timer_event(self) -> None:
        """ Indicates the the health check timer has expired and health check information must be published. """
        super().health_timer_event()
        mth_name = "{}.{}()".format(self.__class__.__name__, inspect.currentframe().f_code.co_name)
        self.logger.debug(mth_name)
        if self._device is None or self.health_topic is None:
            return
        health_result = self._device.health()
        msg = wp_queueing.QueueMessage(self._health_topic())
        msg.msg_payload = health_result.to_dict()
        self.health_topic[0].publish_single(msg)
        self.logger.debug('{}: publish "{}"'.format(mth_name, json.dumps(msg.msg_payload)))
